1.	1주차에서 살펴보았듯이 빅데이터(Big Data)라는 것은 기존 데이터보다 방대하여
2.	기존 방법이나 도구로는 데이터의 수집이나 저장, 분석 등이 어려운 정형 및 비정형 데이터들을 의미합니다.
3.	쉽게 말해서, 빅데이터는 디지털 환경에서 생성되는 데이터가 생성 주기도 짧고,
4.	형태도 수치 데이터뿐만 아니라 문자와 영상 데이터를 포함하는 대규모 데이터를 말합니다.
5.	이러한 빅데이터 처리와 분석을 위해 널리 활용되는 대표적인 프로그래밍 언어로 R과 파이썬을 들 수 있는데요.
6.	이 중에 빅데이터의 처리 및 분석을 위해 어떤 것을 기본 프로그래밍 도구로 사용해야할지가 궁금할 것입니다.
7.	통상적으로 R은 통계학자들에 의해 애초부터 통계 업무를 위해 만들어진 언어기 때문에 보다 통계학적인 요소가 잘 스며 들어 있는 도구라고 볼 수 있다.
8.	반면 파이썬은 퀴도 반 로섬이 1991년에 처음 배포한 언어로서 단순한 문법 구조를 가진 고수준의 언어입니다.
9.	그래서 이해하기 쉽고 유연한 문법의 특징을 갖고 있습니다.
10.	아울러 파이썬에는 연산능력을 극대화시켜 주는 오픈소스 라이브러리가 풍부하여 높은 접근성을 갖고 있는 특징이 있습니다.
11.	어떤 도구를 활용해야 할지는 각 도구의 장단점이 무엇인지를 분석하여 적절한 도구를 사용하는 것이 좋겠습니다.
12.	앞서 “빅데이터 기초” 교과목에서는 빅데이터를 처리를 위한 기초 영역을 다루면서 R 프로그래밍 도구를 살펴보았습니다.
13.	빅데이터 분석 및 처리 기술을 다루는 본 교과에서는 대용량 데이터의 분석과 처리에 좀 더 높은 유연성과 활용성을 갖고 있는
14.	파이썬 프로그래밍 도구를 기반으로 빅데이터 분석과 처리 과정을 살펴보도록 하겠습니다.
15.	원래 파이썬은 프로그래밍 언어 자체가 데이터 분석이나 대용량 계산을 염두에 두고 설계한 것은 아닙니다.
16.	그러나, 빅데이터 분야에서 파이썬을 널리 사용하는 이유는 다양한 패키지가 목적에 맞게 개발되어 있고, 그리고 꾸준히 개발 및 출시되고 있다는 점 때문입니다.
17.	특히,   이러한 패키지 중에 동일한 데이터 타입을 가진 배열 기반의 데이터를 처리하기 위한 numpy, data frame 형태로 데이터를 다룰 수 있게 해주는 Pandas,
18.	일반적인 과학 계산 작업을 위한 SciPy, 데이터 시각화를 위한 Matplotlib, 머신러닝을 위한 Scikit-Learn 등 수많은 패키지가 개발되어 왔습니다.
19.	이러한 다양한 패키지 덕분으로 파이썬 프로그래밍 언어가 빅데이터 분야에서 기본 프로그래밍 도구로 널리 사용되고 있는 것입니다.
20.	그럼 본격적으로 빅데이터 분석 처리를 위해 데이터를 효과적으로 저장하고 가공하는 방법에 대해서 살펴보겠습니다.
21.	일반적으로 데이터는 다양한 원천으로 나오며, 이미지, 사운드, 수치 등 다양한 형식으로 존재합니다.
22.	하지만, 컴퓨터 내부에서 연산을 처리하기 위해서는 데이터 자체를 숫자 배열로 변환하여 처리하는 것이 도움이 됩니다.
23.	예를 들어 이미지, 특히 디지털 이미지는 단순히 해당 영역에 대한 픽셀 밝기를 나타내는 2차원 숫자 배열로 생각할 수 있습니다.
24.	또한, 사운드 데이터는 시간 대비 강도를 나타내는 1차원 배열로 생각할 수 있습니다.
25.	데이터가 무엇이든 간에 데이터를 분석하기 위한 첫 번째 단계는 원본 데이터를 숫자 배열로 변환하여
26.	좀 더 편한 방식으로 연산을 적용하고 그 연산 결과를 다루기 쉬운 형태로 변환하여 분석하는 것이 좋습니다.
27.	이러한 이유로 숫자 배열을 효율적으로 저장하고 가공하는 것은 빅데이터 분석과 처리를 위한 가장 기본적인 절차로 볼 수 있습니다.
28.	파이썬에서는 이러한 숫자 배열을 전문적으로 다룰 수 있는 Numpy 패키지를 제공하고 있습니다.
29.	Numpy는 Numerical Python의 줄임말입니다. 벡터 및 행렬 연산에 있어서 매우 유용한 기능을 제공합니다.
30.	더욱이, 빅데이터 분석 및 처리, 머신러닝 등에서 요구하는 데이터 유형은 기본적으로 다차원(multi-dimensional) array를 요구합니다.
31.	그래서 배열을 전문적으로 다루는 numpy가 딱 적당한 패키지입니다.
32.	또한, Numpy는 빅데이터 분석을 위해 사용되는 라이브러리인 pandas와 matplotlib에서 기본으로 사용되는 패키지입니다.
33.	numpy는 기본적으로 array라는 단위로 데이터를 관리하며 이를 기반으로 연산을 수행합니다.
34.	여기서, array라는 것은 동일한 데이터 타입을 갖는 벡터나 행렬로 볼 수 있습니다.
35.	어찌 보면, Numpy 배열은 파이썬의 내장 타입인 list와 비슷하지만, 배열 규모가 커질수록 데이터 저장 및 처리에 있어서 Numpy 배열이 휠씬 더 효율적입니다.
36.	우선, Numpy를 사용하기 위해서는 화면의 코드와 같이 numpy를 import해야 합니다.
37.	 
38.	별칭으로 np를 사용하여 임포트하였습니다.
39.	다음으로 numpy의 array 정의와 사용 방법에 대해서 알아보겠습니다.
40.	화면과 같이, [1, 2, 3, 4, 5]라는 요소값을 갖는 리스트를 만들어 그것을 data1 변수에 할당하고 
41.	마찬가지로 [6, 5, 4, 3, 2, 1] 요소값을 갖는 리스트를 만들어 그 리스트를 data2 변수도 할당하였습니다.
42.	이때, 화면의 실행 버튼을 누르면 명령문이 수행되어 그 결과가 다음 줄에 나타납니다.
43.	다음으로 numpy를 이용하여 array를 정의해 보겠습니다.
44.	화면의 코드는 ar1이라는 변수에 numpy 배열을 만들어 할당하는 명령어를 보여줍니다.  
45.	그리고 데이터는 앞서 정의한 data1 리스트를 인자로 사용합니다.
46.	배열에 있는 데이터에 데이터 타입을 지정하여 정의할 수 있는데요, 데이터 타입을 설정하려면 dtype 키워드를 사용합니다.
47.	화면의 코드에서는 배열 정의 부분에 dtype이라는 지정된 인자에 실수 데이터 타입인 float32를 할당하여
48.	배열 내 데이터에 데이터 타입을 정의하였습니다.  
49.	원래 data2 리스트는 정수 요솟값을 가진 리스트였으나, 데이터 타입을 실수로 지정하였기 때문에
50.	실수형의 데이터를 갖는 배열이 만들어졌습니다.
51.	아울러, Numpy 배열은 1차원 구성뿐만 아니라 다차원 구성도 가능합니다.
52.	화면의 명령문은 리스트를 사용하여 다차원 배열을 초기화하는 코드를 보여줍니다.  
53.	앞서 정의한 data1 리스트를 활용하였으며, data1 리스트의 요소수가 5개이고
54.	range 함수의 결과로 3개 요소로 구성되는 1차원 리스트가 산출되기 때문에 결과적으로 5×3 행렬이 만들어집니다.
55.	행렬 생성에 관한 예제를 좀 더 살펴보겠습니다.
56.	화면의 명령문은 파이 값인 3.14로 값을 지정하여 채운 3×5 행렬을 만드는 예입니다.
57.	full 함수의 첫 번째 인자는배열 크기를 나타내며, 두 번째 인자는 배열에 넣을 지정값을 나타냅니다.
58.	다음은 0부터 시작해서 2씩 더해 20까지 채운 배열을 만드는 예입니다. 여기서, 20은 포함되지 않습니다.
59.	이 함수는 파이썬 내장 함수인 range()와 유사하게 동작합니다.
60.	배열을 만드는 또 다른 예로서 0과 1사이에 일정한 간격을 가진 세 개의 값으로 채운 배열을 만들어 보겠습니다.
61.	화면에 보시는 바와 같이 linspace 명령어를 수행하면 0.5 간격의 3개 요솟값을 가진 배열이 만들어집니다.
62.	한편, 무작위로 값이 채워진 행렬을 만드는 예를 살펴보겠습니다.
63.	화면의 명령문는 3×3 행렬을 생성하고, 그 내용을 0과 1사이의 무작위 값으로 채워줍니다.
64.	다음 화면의 명령문은 0에서 100사이의 구간 내에서 무작위로 발생시킨 정수로 값이 채워진 배열을 생성합니다.
65.	randint의 첫 번째 인자는 구간의 시작을 나타내고, 두 번째 인자는 구간의 끝을 나타냅니다.
66.	그리고 세 번째 인자는 배열 크기를 나타냅니다. 여기서는 배열 크기로 3×3 행렬을 지정하였습니다.
67.	행렬 생성에 관한 마지막 예제를 살펴보겠습니다.
68.	3×3 단위 행렬은 eye 함수를 사용하여 화면의 명령문과 같이 만들 수 있습니다.
69.	즉, eye 함수는 대각선으로는 1이고 나머지는 0값을 가진 2차원 배열을 생성합니다.
70.	이제부터는 NumPy의 표준 데이터 타입에 대해서 살펴보겠습니다.
71.	Numpy의 배열은 한가지 데이터 타입값만을 담고 있으므로 데이터 타입의 종류와 제약 사항을 살펴보는 것이 numpy의 활용 측면에서 매우 중요합니다.
72.	화면의 표는 numpy의 데이터 타입을 나열한 것입니다.
73.	이 표를 살펴보면, 다른 프로그래밍 언어와 유사한 데이터 타입을 갖고 있는데요
74.	특이할 만한 점은 복소수 데이터 타입을 numpy에서 표현할 수 있다는 점입니다.
75.	다음으로 배열의 분할, 재구성, 결합에 관한 내용을 살펴보겠습니다. 배열의 분할, 재구성, 결합은 효율적인 연산을 가능하게 주는 numpy의 기능입니다.
76.	이를 위해 배열 속성, 배열 인덱싱, 배열 슬라이싱, 배열 재구조화, 배열 결합 및 분할에 대해서 자세히 살펴보겠습니다.
77.	우선, 배열 속성에 관한 사항을 화면의 예제를 통해 살펴보겠습니다.
78.	기본적으로 각 배열은 속성으로 차원의 개수, 각 차원의 크기, 전체배열 크기를 갖고 있으며,
79.	여기에서 차원의 개수는 ndim으로, 각 차원의 크기는 shape으로, size는 전체 배열의 크기를 나타냅니다.
80.	화면의 명령문은 numpy 배열 x에 대한 ndim, shape, 그리고 size를 출력하는 예를 보여줍니다.
81.	다음으로 배열 인덱싱은 개별 배열 요솟값을 가져오거나 특정 위치에 값을 설정하기 위해 사용합니다.
82.	파이썬에서 사용하는 리스트 인덱싱과 유사합니다.
83.	첫 번째 인덱스는 0이며 꺽쇠괄호 안에 원하는 인덱스를 지정하여 배열의 요솟값에 접근할 수 있습니다.
84.	또한, 음수 인덱스를 사용하여 배열의 끝에서부터 인덱싱하여 접근할 수 있습니다.
85.	화면의 명령문은 인덱스 0을 사용하여 배열에서 첫 번째 인덱스에 해당하는 값인 2를 출력하며,
86.	음수 인덱스 -2를 사용하여 끝에서 두 번째에 해당하는 요솟값인 8에 대한 출력을 보여줍니다.
87.	다차원 배열에서는 콤마로 구분되는 인덱스 튜플을 이용해 배열 항목에 접근할 수 있습니다.
88.	화면의 예를 살펴보겠습니다.
89.	인덱스 표기법을 사용하여 값을 수정할 수도 있습니다.
90.	화면은 0행, 0열의 값을 12로 수정하는 예입니다. 해당 위치의 요솟값이 2가 12로 변경되었습니다.
91.	다음으로, 배열 슬라이싱은 배열 내부에 있는 요솟값으로 이루어진 하위 배열을 가져오거나 설정하기 위해 사용되는 기능입니다.
92.	콜론(:) 기호를 나타내는 슬라이스(slice) 표기법을 사용하여 하위 배열에 접근할 수 있으며,
93.	화면에 나타난 규칙에 따라 배열 x의 슬라이스에 접근할 수 있습니다.
94.	start, stop, step 값을 지정하지 않으면 기본 값으로 start는 0, stop은 차원 크기로, step은 1로 설정됩니다.
95.	우선 1차원 배열을 예로써 살펴봅시다.
96.	이 예제는 인덱스 4부터 인덱스 7까지의 요소를 가진 하위 배열을 만들어 줍니다.
97.	다음 예제는 첫 번째 다섯 개의 요소를 가진 하위 배열을 만들어 줍니다.
98.	반대로 이 예제는 인덱스 5이후의 요소들로 구성된 하위 배열을 만들어 줍니다.
99.	다차원 슬라이싱도 콤마로 구분된 다중 슬라이스를 사용하여 동일한 방식으로 동작합니다.
100.	화면의 예를 살펴봅니다.
101.	인덱스 0, 1의 행과 인덱스 0, 1, 2의 열로 구성되는 다차원 하위 배열이 결과로 나옵니다.
102.	다음 예제는 행은 모든 행이고 열에 대해서는 한 열 걸러 하나씩으로 구성된 다차원 하위 배열이 결과로 나옵니다.
103.	배열의 재구조화는 배열의 형상을 변경하는 것입니다.
104.	배열의 재구조화를 위해 가장 널리 사용하는 방법은 reshape() 메소드를 사용하는 것입니다.
105.	예를 들어, 3×3 행렬에 숫자 1부터 9까지 넣고자 한다면 화면과 같이 수행하면 됩니다.
106.	이제까지 살펴본 명령문은 모두 하나의 배열을 사용하여 동작한 것입니다.
107.	하나의 배열이 아니라 여러 배열을 하나로 합치거나, 반대로 하나의 배열을 여러 개로 분할하는 것도 가능합니다.
108.	우선 배열 연결에 대해서 살펴보겠습니다
109.	numpy에서는 주로 concatenate, vstack, hstack 루틴을 이용해 두 배열결합하거나 연결을 할 수가 있습니다.
110.	화면의 예제는 concatenate의 예입니다.
111.	혼합된 차원의 배열로 작업할 때는 vstack이나 hstack을 사용할 수 있습니다.
112.	vstack는 수직 스택을 나타내며, hstack은 수평 스택을 나타냅니다.
113.	화면의 그림과 같이 원래 두 개의 배열이 vstack을 수행하고 난 후에 수직으로 하나로 합쳐지게 됩니다.
114.	한편, 다음 화면의 예제는 배열을 수평으로 쌓아서 만들어 줍니다.
115.	화면의 그림과 같이 원래 hstack을 수행하고 난 후에 원래 두 개의 배열이 수평으로 하나로 합쳐지게 됩니다.
116.	다음으로 배열 분할에 대해서 살펴보겠습니다. 결합의 반대는 분할이겠죠.
117.	즉, 배열 원본을 여러 개의 하위 배열로 나누는 것입니다.
118.	numpy에서 지원하는 배열 분할 함수로는 대표적으로 split, hsplit, vsplit 함수가 있습니다.
119.	이 예제는 리스트 x를 x1, x2, x3로 분할하는 것을 보여줍니다.
120.	split 함수의 첫 번째 인자는 분할 대상이 되는 리스트를 나타내고 있고요, 두 번째 인자는 분할 위치를 나타냅니다.
121.	화면에서 볼 수 있듯이 분할 위치로 3과 5가 주어졌기때문에, 인덱스 3과 인덱스 5에서 리스트가 분할되어 총 3개의 리스트로 분할됩니다.
122.	N개의 분할점이 지정되면, N+1개의 하위 배열이 생성됩니다.
123.	다음은 vsplit에 대한 코드입니다.
124.	화면의 명령문에서 볼 수 있듯이, 분할 위치를 2로 지정하였기 때문에 grid 배열이 상하로 2개 나누어 졌습니다.
125.	한편, hsplit를 적용한 다음의 화면에서는 마찬가지로 분할 위치를 2로 지정하였기 때문에, grid 배열이 좌우로 2개 나누어 집니다.
126.	이번 차시에서는 numpy 패키지 개념부터 시작하여 numpy 핵심인 array 정의와 사용방법 배열구성 방법 numpy 표준 데이터 타입.
127.	그리고 배열의 분할, 재구성 재구성 결합방법 등에 대해서 학습하였습니다. 다음으로 2주차 2차시에서는 numpy의 심화 내용으로 유니버설 함수,
128.	집계 함수, 브로드캐스팅 연산, 비교 연산, 마스크로스 불리언 배열, 팬시 인덱싱 병렬 등을 다양한 예제와 함께 학습해 보도록 하겠습니다.

